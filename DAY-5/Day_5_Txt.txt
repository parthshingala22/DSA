* Arrays:-

-> Collection of similar type of data & Continues allocation
-> In c & c++ we have pointer . Definatly element will store in Continues format.
-> In java we dont have pointer then there is chance of element might store in random places

Syntax:-

datatype[] arrayname = {};

* Primitive & Nonprimetive:-

-> Primitive datatype can't be splited & devided. ex:- int, char, float
-> Nonprimetive datatype can be devided ex:- String, All the object created by the user

ex:-

class Node{
    int data;
    Node next;
}

-> All the objects will be stored in heap  memory. All the references will be store in stack memory.
-> Stack memory having less space compared to heap.

ex:-

int a = 10;
int b = 12;
int c = 14;
int d = 16;
int[] arr = {10,12,14,16}; --> declaration & initialization in same line.
int[] arr; --> declaration happened here.
arr = {1,2,3,4} --> initialization happened here.

-> All the variable storing same datatype. insted of creating multipal variable create an array.
-> If you create multipal variables to get the address to get the data siplly we can print variables. 
   When to comes to array we won't print the data we can print using index value and by default index value start with zero.
-> To get the length of the array we have methode called "array_name.length()" and in string it is string_name.length()

* Camel case & Snake case
-> Camel case :- arrayName
-> Snake case :- array_name

-> In java it is preffered to write in camel case to write production lavel code.

--> Production lavel code :-

void additionOfTwoNumbers(){

}

* Type of printing format:-
  
    1)  class Day_5_Code{
            public static void main(String args[]){
                int[] arr = {1,2,3,4,5};
                for(int i=0; i<arr.length; i++){
                    System.out.println(arr[i]+"");
                }
            }
        }

    -> we can print array valu in simple form

    2)  for(int i : arr){
          System.out.println(i + " ");
        }

    -> You can print array value using for each loop.
    -> In for each loop we don't need index value.

    3)  System.out.print(Arrays.toString(arr));

    -> toString is an inbuilt methode to print an array.
    -> toString can accepet only one arguments and that to array.

* Declaring the size of an arry and initialization the value later :-
-> Array having fixed size. If an declare an arr size you can't be change.

int[] arr = new int[5];
-> before '=' array referrence first created with the help of new keyword actual object will be created in the heap memory for the particular datatype and size.
-> If the array type is int all the default valu are zero . If it is string all the dafault value is null and null is a litral.

arr[0] = 1;
arr[1] = 2;
arr[3] = 3;
arr[4] = 4;
arr[5] = 5;

-> Whenever you trying to assign and trying to get nth value or nth index than you will get and exeption array out of bound.  

Que:
1) check wheather the given array is sorted or not.
2) check wheather element is there are not.
3) [1,0,1,0,1,0] move all zeros to right side like [1,1,1,0,0,0].